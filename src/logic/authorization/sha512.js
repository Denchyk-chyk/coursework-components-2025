/**
 * Обчислює SHA-512 хеш від вхідного текстового повідомлення.
 *
 * @param {string} message - Вхідний текст, який потрібно захешувати.
 * @returns {Promise<string>} - Проміс, що резолвиться у рядок з SHA-512 хешем у шістнадцятковому форматі.
 *
 * Пояснення:
 * - Використовується вбудований Web Crypto API (crypto.subtle) для обчислення криптографічного хешу.
 * - Повідомлення кодується у Uint8Array через TextEncoder, бо digest працює з бінарними даними.
 * - Після асинхронного обчислення хешу (ArrayBuffer) конвертується у масив байтів.
 * - Кожен байт перетворюється у 2-символьний шістнадцятковий рядок з доповненням нулями.
 * - Всі шістнадцяткові представлення об’єднуються у суцільний рядок — кінцевий хеш.
 */
export async function sha512(message) {
  // Кодування текстового рядка у Uint8Array для подальшої обробки криптофункцією
  const msgBuffer = new TextEncoder().encode(message);

  // Асинхронне обчислення хешу SHA-512 над бінарними даними
  const hashBuffer = await crypto.subtle.digest("SHA-512", msgBuffer);

  // Перетворення отриманого ArrayBuffer у масив байтів (чисел від 0 до 255)
  const hashArray = Array.from(new Uint8Array(hashBuffer));

  // Конвертація кожного байта у двозначний шістнадцятковий рядок
  const hashHex = hashArray
    .map((b) => b.toString(16).padStart(2, "0"))
    .join(""); // Об'єднання усіх шістнадцяткових байтів у один рядок

  // Повернення рядка з повним SHA-512 хешем у шістнадцятковому форматі
  return hashHex;
}
